# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:14:13+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    KecerCertificatePostRequest,
    KecerCertificatePostResponse,
    KecerCertificatePostResponse1,
    KecerCertificatePostResponse2,
    KecerCertificatePostResponse3,
    KecerCertificatePostResponse4,
    KecerCertificatePostResponse5,
    KecerCertificatePostResponse6,
    TapcnCertificatePostRequest,
    TapcnCertificatePostResponse,
    TapcnCertificatePostResponse1,
    TapcnCertificatePostResponse2,
    TapcnCertificatePostResponse3,
    TapcnCertificatePostResponse4,
    TapcnCertificatePostResponse5,
    TapcnCertificatePostResponse6,
    TdlcsCertificatePostRequest,
    TdlcsCertificatePostResponse,
    TdlcsCertificatePostResponse1,
    TdlcsCertificatePostResponse2,
    TdlcsCertificatePostResponse3,
    TdlcsCertificatePostResponse4,
    TdlcsCertificatePostResponse5,
    TdlcsCertificatePostResponse6,
    UgdcnCertificatePostRequest,
    UgdcnCertificatePostResponse,
    UgdcnCertificatePostResponse1,
    UgdcnCertificatePostResponse2,
    UgdcnCertificatePostResponse3,
    UgdcnCertificatePostResponse4,
    UgdcnCertificatePostResponse5,
    UgdcnCertificatePostResponse6,
)

app = MCPProxy(
    description='APIs provided by Directorate of Municipal Administration, Karnataka.',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Directorate of Municipal Administration, Karnataka',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/municipaladmin/v3'}],
)


@app.post(
    '/kecer/certificate',
    description=""" API to verify Khatha Extract / Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def kecer(body: KecerCertificatePostRequest = None):
    """
    Khatha Extract / Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tapcn/certificate',
    description=""" API to verify New Tap Connection. """,
    tags=['service_connection_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def tapcn(body: TapcnCertificatePostRequest = None):
    """
    New Tap Connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tdlcs/certificate',
    description=""" API to verify Trade License/ Certificate. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def tdlcs(body: TdlcsCertificatePostRequest = None):
    """
    Trade License/ Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ugdcn/certificate',
    description=""" API to verify Jalanidhi - New UGD Connection. """,
    tags=['service_connection_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ugdcn(body: UgdcnCertificatePostRequest = None):
    """
    Jalanidhi - New UGD Connection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
